declare enum Blocks {
  /** @abstract */
  EMPTY = 0x00,
  STONE_BLOCK = 0x01,
  BRICKS = 0x02,
  GRASS_A = 0x03,
  GRASS_B = 0x04,
  DIRT = 0x05,
  WOOD_X = 0x06,
  WOOD_Y = 0x07,
  WOOD_Z = 0x08,
  FOLDER_UNKNOWN = 0x17e,
  SWIPE_CHICK = 0x17f,
  DIRT_SLAB = 0x180,
  STEEL = 0x181,
  ARCH = 0x182,
  BOX = 0x184,
  GOAL = 0x185,
  BUTTON = 0x186,
  FOLDER_EMPTY = 0x19f,
  FOLDER_LOCKED = 0x1a0,
  PHYSICS_BOX = 0x1a9,
  BALL = 0x1aa,
  TILT_BALL = 0x1ab,
  PASS_THROUGH = 0x1c0,
  DIRT_B = 0x1ed,
  FLOWERS = 0x1ee,
  FOLIAGE = 0x1ef,
  FOLIAGE_B = 0x1f0,
  FOLIAGE_TOP = 0x1f1,
  FOLIAGE_BOT = 0x1f2,
  FOLIAGE_SLAB = 0x1f3,
  SHRUB = 0x1f4,
  STONE = 0x1f5,
  STONE_B = 0x1f6,
  STONE_TOP = 0x1f7,
  STONE_BOT = 0x1f8,
  STONE_SLAB = 0x1f9,
  STONE_PILLAR = 0x1fa,
  STONE_LOWER = 0x1fb,
  WOOD_LOWER_X = 0x1fc,
  WOOD_LOWER_Y = 0x1fd,
  WOOD_UPPER_X = 0x1fe,
  WOOD_UPPER_Y = 0x1ff,
  STICK_X = 0x200,
  STICK_Y = 0x201,
  STICK_Z = 0x202,
  STICK_NE = 0x203,
  STICK_NW = 0x204,
  STICK_SW = 0x205,
  STICK_SE = 0x206,
  STICK_UE = 0x207,
  STICK_UN = 0x208,
  STICK_UW = 0x209,
  STICK_US = 0x20a,
  STICK_DE = 0x20b,
  STICK_DN = 0x20c,
  STICK_DW = 0x20d,
  STICK_DS = 0x20e,
  WHEEL = 0x216,
  DASH_CAT = 0x217,
  MARKER = 0x218,
  DINO = 0x219,
  DINO_RED = 0x21a,
  BUTTERFLY = 0x21b,
  SCRIPT = 0x221,
  SPHERE = 0x222,
  SLATE = 0x223,
  SLATE_B = 0x224,
  SLATE_NE = 0x225,
  SLATE_NW = 0x226,
  SLATE_SE = 0x227,
  SLATE_SW = 0x228,
  SLATE_TOP = 0x229,
  SLATE_BOT = 0x22a,
  PARTICLE = 0x22b,
}

declare interface NumWire {
  readonly "": "NumWire";
}
declare interface NumPointer extends NumWire {
  readonly ".": "NumPointer";
}
declare interface VecWire {
  readonly "": "VecWire";
}
declare interface VecPointer extends VecWire {
  readonly ".": "VecPointer";
}
declare interface BoolWire {
  readonly "": "BoolWire";
}
declare interface BoolPointer extends BoolWire {
  readonly ".": "BoolPointer";
}
declare interface RotWire {
  readonly "": "RotWire";
}
declare interface RotPointer extends RotWire {
  readonly ".": "RotPointer";
}
declare interface ObjWire {
  readonly "": "ObjWire";
}
declare interface ObjPointer extends ObjWire {
  readonly ".": "ObjPointer";
}
declare interface ConWire {
  readonly "": "ConWire";
}
declare interface ConPointer extends ConWire {
  readonly ".": "ConPointer";
}

// Game
declare enum Price {
  TenFixed = 0,
  TenLinear = 2,
  TenDouble = 3,
  HundredFixed = 4,
  HundredLinear = 5,
  HundredDouble = 6,
  ThousandFixed = 7,
  ThousandLinear = 8,
  ThousandDouble = 9,
  TenThousandFixed = 10,
}
declare enum LeaderboardOrder {
  MostPoints = 0,
  FewestPoints = 2,
  FastestTime = 3,
  LongestTime = 4,
}
declare function win(delay?: number): void;
declare function lose(delay?: number): void;
declare function setScore(
  leaderboardOrder: LeaderboardOrder,
  score?: NumWire,
  coins?: NumWire
): void;
declare function setCamera(
  prespective: boolean,
  position?: VecWire,
  rotation?: RotWire,
  range?: NumWire
): void;
declare function setLight(position?: VecWire, rotation?: RotWire): void;
declare function getScreenSize(): [NumWire, NumWire];
declare function getAccelerometer(): [VecWire];
declare function getFrame(): [NumWire];
declare function addMenuItem(
  name: string,
  count: number,
  price: Price,
  variable?: NumPointer,
  picture?: ObjWire
): void;

// Objects
declare function getPosition(object?: ObjWire): [VecWire, RotWire];
declare function setPosition(
  object?: ObjWire,
  position?: VecWire,
  rotation?: RotWire
): void;
declare function addRaycast(
  from?: VecWire,
  to?: VecWire
): [BoolWire, VecWire, ObjWire];
declare function getSize(object?: ObjWire): [VecWire, VecWire];
declare function setVisible(object?: ObjWire, visible?: BoolWire): void;
declare function copyObject(object?: ObjWire): [ObjWire];
declare function deleteObject(object?: ObjWire): void;

// Sound
declare enum Sound {
  Chirp = 0,
  Scrape = 1,
  Squeek = 2,
  Engine = 3,
  Button = 4,
  Ball = 5,
  Piano = 6,
  Marimba = 7,
  Pad = 8,
  Beep = 9,
  Plop = 10,
  Flop = 11,
  Splash = 12,
  Boom = 13,
  Hit = 14,
  Clang = 15,
  Jump = 16,
}
declare function playSound(
  loop: boolean,
  sound: Sound,
  volume?: NumWire,
  pitch?: NumWire
): [NumWire];
declare function stopSound(channel?: NumWire): void;
declare function setVolumePitch(
  channel?: NumWire,
  volume?: NumWire,
  pitch?: NumWire
): void;

// Physics
declare function addForce(
  object?: ObjWire,
  force?: VecWire,
  applyAt?: VecWire,
  torque?: VecWire
): void;
declare function getVelocity(object?: ObjWire): [VecWire, VecWire];
declare function setVelocity(
  object?: ObjWire,
  velocity?: VecWire,
  spin?: VecWire
): void;
declare function setLocked(
  object?: ObjWire,
  position?: VecWire,
  rotation?: VecWire
): void;
declare function setMass(object?: ObjWire, mass?: NumWire): void;
declare function setFriction(object?: ObjWire, friction?: NumWire): void;
declare function setBounciness(object?: ObjWire, bounciness?: NumWire): void;
declare function setGravity(gravity?: VecWire): void;
declare function addConstraint(
  base?: ObjWire,
  part?: ObjWire,
  pivot?: VecWire
): [ConWire];
declare function setLinearLimits(
  constraint?: ConWire,
  lower?: VecWire,
  upper?: VecWire
): void;
declare function setAngularLimits(
  constraint?: ConWire,
  lower?: VecWire,
  upper?: VecWire
): void;
declare function setLinearSpring(
  constraint?: ConWire,
  stiffness?: VecWire,
  damping?: VecWire
): void;
declare function setAngularSpring(
  constraint?: ConWire,
  stiffness?: VecWire,
  damping?: VecWire
): void;
declare function setLinearMotor(
  constraint?: ConWire,
  speed?: VecWire,
  force?: VecWire
): void;
declare function setAngularMotor(
  constraint?: ConWire,
  speed?: VecWire,
  force?: VecWire
): void;

// Control
declare enum Touching {
  Touching = 0,
  Begins = 1,
  Ends = 2,
}
declare enum Count {
  First = 0,
  Second = 1,
  Third = 2,
}
declare enum JoystickMode {
  XY = 0,
  Screen = 1,
}
declare function onPlay(callback?: () => void): void;
declare function onUpdate(callback?: () => void): void;
declare function onBoxart(callback?: () => void): void;
declare function onTouch(
  touching: Touching,
  count: Count,
  callback?: (screenX: NumWire, screenY: NumWire) => void
): [NumWire, NumWire];
declare function onSwipe(callback?: (direction: VecWire) => void): [VecWire];
declare function addButton(callback?: () => void): void;
declare function addJoystick(mode: JoystickMode): [VecWire];
declare function onCollision(
  firstObject?: ObjWire,
  callback?: (secondObject: ObjWire, impluse: NumWire, normal: VecWire) => void
): [ObjWire, NumWire, VecWire];
declare function loop(
  from?: NumWire,
  to?: NumWire,
  callback?: (counter: NumWire) => void
): [NumWire];

// Math
declare function negate(number?: NumWire): [NumWire];
declare function inverse(rotation?: RotWire): [RotWire];
declare function addNumbers(a?: NumWire, b?: NumWire): [NumWire];
declare function addVectors(a?: VecWire, b?: VecWire): [VecWire];
declare function subtractNumbers(a?: NumWire, b?: NumWire): [NumWire];
declare function subtractVectors(a?: VecWire, b?: VecWire): [VecWire];
declare function multiply(a?: NumWire, b?: NumWire): [NumWire];
declare function scale(vector?: VecWire, by?: NumWire): [VecWire];
declare function rotate(vector?: VecWire, by?: RotWire): [RotWire];
declare function combine(a?: RotWire, b?: RotWire): [RotWire];
declare function divide(a?: NumWire, b?: NumWire): [NumWire];
declare function power(a?: NumWire, b?: NumWire): [NumWire];
declare function equalNumbers(a?: NumWire, b?: NumWire): [BoolWire];
declare function equalVector(a?: VecWire, b?: VecWire): [BoolWire];
declare function equalObjects(a?: ObjWire, b?: ObjWire): [BoolWire];
declare function equalBoolean(a?: BoolWire, b?: BoolWire): [BoolWire];
declare function lessThan(a?: NumWire, b?: NumWire): [BoolWire];
declare function greaterThan(a?: NumWire, b?: NumWire): [BoolWire];
declare function and(a?: BoolWire, b?: BoolWire): [BoolWire];
declare function or(a?: BoolWire, b?: BoolWire): [BoolWire];
declare function not(a?: BoolWire): [BoolWire];
declare function random(min?: NumWire, max?: NumWire): [NumWire];
declare function setRandomSeed(seed?: NumWire): [NumWire];
declare function min(a?: NumWire, b?: NumWire): [NumWire];
declare function max(a?: NumWire, b?: NumWire): [NumWire];
declare function sin(number?: NumWire): [NumWire];
declare function cos(number?: NumWire): [NumWire];
declare function round(number?: NumWire): [NumWire];
declare function floor(number?: NumWire): [NumWire];
declare function ceil(number?: NumWire): [NumWire];
declare function abs(number?: NumWire): [NumWire];
declare function mod(a?: NumWire, b?: NumWire): [NumWire];
declare function log(number?: NumWire, base?: NumWire): [NumWire];
declare function breakVector(vector?: VecWire): [NumWire, NumWire, NumWire];
declare function makeVector(x?: NumWire, y?: NumWire, z?: NumWire): [VecWire];
declare function normalize(vector?: VecWire): [VecWire];
declare function dotProduct(a?: VecWire, b?: VecWire): [NumWire];
declare function crossProduct(a?: VecWire, b?: VecWire): [VecWire];
declare function breakRotation(rotation?: RotWire): [NumWire, NumWire, NumWire];
declare function makeRotation(
  xAngle?: NumWire,
  yAngle?: NumWire,
  zAngle?: NumWire
): [RotWire];
declare function distance(a?: VecWire, b?: VecWire): [NumWire];
declare function lerp(
  from?: RotWire,
  to?: RotWire,
  amount?: NumWire
): [RotWire];
declare function axisAngle(axis?: VecWire, angle?: NumWire): [RotWire];
declare function screenToWorld(
  screenX?: NumWire,
  screenY?: NumWire
): [VecWire, VecWire];
declare function worldToScreen(position?: VecWire): [NumWire, NumWire];
declare function lineVsPlane(
  lineFrom?: VecWire,
  lineTo?: VecWire,
  planePoint?: VecWire,
  planeNormal?: VecWire
): [VecWire];
declare function lookRotation(direction?: VecWire, up?: VecWire): [RotWire];

// Values
declare const Inf = 340282346638528859811704183484516925440.0;
declare function Number(number: number): [NumWire];
declare function Vector(x: number, y: number, z: number): [VecWire];
declare function Rotation(x: number, y: number, z: number): [RotWire];
declare function Boolean(boolean: boolean): [BoolWire];
declare function inspectNumber(value?: NumWire): void;
declare function inspectVector(value?: VecWire): void;
declare function inspectRotation(value?: RotWire): void;
declare function inspectBoolean(value?: BoolWire): void;
declare function inspectObject(value?: ObjWire): void;

// Variables
declare function getNumber(name?: string): [NumPointer];
declare function getObject(name?: string): [ObjPointer];
declare function getVector(name?: string): [VecPointer];
declare function getRotation(name?: string): [RotPointer];
declare function getBoolean(name?: string): [BoolPointer];
declare function getConstraint(name?: string): [ConPointer];
declare function setNumber(name: string, value?: NumWire): void;
declare function setObject(name: string, value?: ObjWire): void;
declare function setVector(name: string, value?: VecWire): void;
declare function setRotation(name: string, value?: RotWire): void;
declare function setBoolean(name: string, value?: BoolWire): void;
declare function setConstraint(name: string, value?: ConWire): void;
declare function setNumberPointer(variable?: NumPointer, value?: NumWire): void;
declare function setObjectPointer(variable?: ObjPointer, value?: ObjWire): void;
declare function setVectorPointer(variable?: VecPointer, value?: VecWire): void;
declare function setRotationPointer(variable?: RotPointer, value?: RotWire): void;
declare function setBooleanPointer(variable?: BoolPointer, value?: BoolWire): void;
declare function setConstraintPointer(variable?: ConPointer, value?: ConWire): void;
declare function listNumber(variable?: NumPointer, index?: NumWire): [NumPointer];
declare function listObject(variable?: ObjPointer, index?: NumWire): [ObjPointer];
declare function listVector(variable?: VecPointer, index?: NumWire): [VecPointer];
declare function listRotation(
  variable?: RotPointer,
  index?: NumWire
): [RotPointer];
declare function listBoolean(
  variable?: BoolPointer,
  index?: NumWire
): [BoolPointer];
declare function listConstraint(
  variable?: ConPointer,
  index?: NumWire
): [ConPointer];
declare function increase(variable?: NumPointer): void;
declare function decrease(variable?: NumPointer): void;

// Utilities
declare function Object(
  blockId: number | string,
  wireX: number,
  wireY: number,
  wireZ: number
): [ObjWire];
